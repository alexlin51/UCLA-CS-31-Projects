include <iostream>
#include <cstring>  // Notice this is NOT <string>; we need it because
// isValidUppercaseStateCode uses std::strstr
#include <cctype>
#include <cassert>
using namespace std;

bool isValidUppercaseStateCode(const char stateCode[]);

long length (const char cstring[])
{
    long count = 0;
    while (cstring[count] != '\0')
        count++;
    return count;
}


bool hasValidSyntax(const char orders[])
{
    //Using the created function to determine length to return true if a 0 size string is detected
    int orderLen = length(orders);
    //cout << orderLen << endl;
    if (orderLen == 0)
    {
        return true;
    }

    char state[3];

    //cout << state << endl;

    int k = 0;
    while (orders[k] != '\0')
    {
        //checking the first 2 letters of the array string
        //cout << orders[k] << endl;
        if (!isalpha(orders[k]))
        {
            //cout << " am i exiting here?" << endl;
            return false;
        }
        
        k++;
       
        //cout << orders[k] << endl;
        
        if (k == orderLen || !isalpha(orders[k]))
        {
            return false;
        }

        k++;
        
       // cout << orders[k] << endl;
        
        // Make sure the letter is an actual state. 


        char temp1 = orders[k - 2];
        char temp2 = orders[k - 1];
       
        
        state[0] = temp1;
        state[1] = temp2;
        state[2] = '\0';
      


        //cout << state << endl;

        //cout << orders[k] << endl;

        state[0] = toupper (state[0]);
        state[1] = toupper (state[1]);
        if (!isValidUppercaseStateCode(state))
        {
            //cout << " am i exiting here?" << endl;
            return false;
        }
        
        //The state code should be followed by a number
    

        if (k == orderLen || !isdigit(orders[k]))
        {
            
            return false;
        }

        k++;

        //cout << orders[k] << endl;

        while (k != orderLen && isdigit(orders[k]))
        {
            
            k++;
            //cout << orders[k] << endl;
        }
        
        // status code now

        //cout << orders[k] << endl;

      //  cout << "element; "<< k << endl;

        if (k == orderLen || (orders[k] != '+' && orders[k] != '-'))
        {
            
            return false;
        }
        
        k++;

    }

    //If we reach here, everything has gone right
    return true;

}



int countCases(const char orders[], char status, int& caseCount)
{
    // Define return values

    const int RET_OK              = 0;
    const int RET_BAD_SYNTAX      = 1;
    const int RET_BAD_STATE_ORDER = 2;
    const int RET_BAD_STATUS      = 3;

      // A bad status character prevents counting

    if (status != '+'  &&  status != '-')
	return RET_BAD_STATUS;

      // An order string with incorrect syntax prevents counting

    if (!hasValidSyntax(orders))
	return RET_BAD_SYNTAX;

      // We will count cases in an int named result, and modify the caseCount
      // parameter only if processing the entire order string succeeds.

    int result = 0;

      // Each iteration of the loop deals with one state order.  Since we
      // know at this point the order string has correct syntax, we are
      // guaranteed there are digits, etc.
    int orderLen = length(orders);

    int k = 0;

    while (k != orderLen)
    {
	    // Skip over the state code (we know there must be one)

	    k += 2;

	     // Determine the state case count

	    int stateCaseCount = 0;
	    while (isdigit(orders[k]))  // we know there's at least one digit
	    {
		    stateCaseCount = 10 * stateCaseCount + orders[k] - '0';
		    k++;
	    }

	    // The state order must not specify zero cases

	    if (stateCaseCount == 0)
	        return RET_BAD_STATE_ORDER;

	     // If the status code (we know there must be one) matches, record
	     // the cases 

	    if (orders[k] == status)
		    result += stateCaseCount;
	    k++;
    }

      // We've successfully processed the entire string, so set caseCount.

    caseCount = result;

    return RET_OK;
}



bool isValidUppercaseStateCode(const char stateCode[])
{
    // In a declaration of an array with initialization, you can omit
    // the number of elements and the compiler will count how many items
    // are in the initializer and use that.  For a C string, the count is
    // the number of characters in the initialization string plus one more
    // for the zero byte.
    const char codes[] =
        "AL.AK.AZ.AR.CA.CO.CT.DE.DC.FL.GA.GU.HI.ID.IL.IN.IA.KS."
        "KY.LA.ME.MD.MA.MI.MN.MS.MO.MP.MT.NE.NV.NH.NJ.NM.NY.NC."
        "ND.OH.OK.OR.PA.PR.RI.SC.SD.TN.TX.UT.VT.VA.WA.WV.WI.WY";
    return (isupper(stateCode[0]) && isupper(stateCode[1]) &&
        stateCode[2] == '\0' && strstr(codes, stateCode) != nullptr);
}

int main()
{
    assert(hasValidSyntax("TX38-CA132+"));
    assert(!hasValidSyntax("MX38-CA132+"));
    
    
    
    int cases;
    cases = -999;    // so we can detect whether countCases sets cases
    assert(countCases("TX38-CA132+Ms6-nY290-UT006+MS8+CA15+", '+', cases) == 0 && cases == 161);
    cases = -999;    // so we can detect whether countCases leaves cases unchanged
    assert(countCases("TX38-CA132+", '%', cases) == 3 && cases == -999);
    


    cout << "All tests succeeded" << endl;
}
